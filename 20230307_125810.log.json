{"env_info": "sys.platform: linux\nPython: 3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]\nCUDA available: True\nGPU 0: NVIDIA GeForce RTX 3060\nCUDA_HOME: /usr/local/cuda\nNVCC: Build cuda_11.1.TC455_06.29190527_0\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.9.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.2-Product Build 20210312 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.1.2 (Git Hash 98be7e8afa711dc9b66c8ff3504129cb82013cdb)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.9.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.10.0\nOpenCV: 4.7.0\nMMCV: 1.3.17\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.28.1+809f970", "config": "model = dict(\n    type='FasterRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=False,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100)))\ndataset_type = 'COCODataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(type='Resize', img_scale=(640, 360), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(640, 360),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=4,\n    workers_per_gpu=0,\n    train=dict(\n        type='CocoDataset',\n        ann_file='/data/input/train/annotation_coco.json',\n        img_prefix='/data/input/train/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True),\n            dict(type='Resize', img_scale=(640, 360), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n        ],\n        classes=('object', )),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/data/input/val/annotation_coco.json',\n        img_prefix='/data/input/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(640, 360),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('object', )),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/data/input/val/annotation_coco.json',\n        img_prefix='/data/input/val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(640, 360),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('object', )))\nevaluation = dict(interval=1, metric='bbox')\noptimizer = dict(type='SGD', lr=0.02, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[8, 11])\nrunner = dict(type='EpochBasedRunner', max_epochs=12)\ncheckpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nclasses = ('object', )\nmetainfo = dict(CLASSES=('object', ), PALETTE=[(220, 20, 60)])\nwork_dir = '/data/output'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 22989674, "exp_name": "faster_rcnn_r50_fpn.py"}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.00198, "memory": 2023, "data_time": 0.09526, "loss_rpn_cls": 0.38919, "loss_rpn_bbox": 0.0051, "loss_cls": 0.13735, "acc": 98.90332, "loss_bbox": 0.01967, "loss": 0.5513, "time": 0.3808}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 0.00398, "memory": 2023, "data_time": 0.05713, "loss_rpn_cls": 0.013, "loss_rpn_bbox": 0.00274, "loss_cls": 0.06991, "acc": 98.21973, "loss_bbox": 0.06259, "loss": 0.14825, "time": 0.34953}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 0.00597, "memory": 2023, "data_time": 0.05899, "loss_rpn_cls": 0.00559, "loss_rpn_bbox": 0.00218, "loss_cls": 0.03375, "acc": 98.70898, "loss_bbox": 0.04859, "loss": 0.09011, "time": 0.32857}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 0.00797, "memory": 2023, "data_time": 0.05729, "loss_rpn_cls": 0.00447, "loss_rpn_bbox": 0.00249, "loss_cls": 0.02899, "acc": 98.88379, "loss_bbox": 0.04705, "loss": 0.08299, "time": 0.32967}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 0.00997, "memory": 2023, "data_time": 0.05978, "loss_rpn_cls": 0.00354, "loss_rpn_bbox": 0.00206, "loss_cls": 0.02839, "acc": 98.96289, "loss_bbox": 0.03764, "loss": 0.07163, "time": 0.33451}
{"mode": "val", "epoch": 1, "iter": 100, "lr": 0.00997, "bbox_mAP": 0.6317, "bbox_mAP_50": 0.9141, "bbox_mAP_75": 0.7828, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.6022, "bbox_mAP_l": 0.6374, "bbox_mAP_copypaste": "0.6317 0.9141 0.7828 -1.0000 0.6022 0.6374"}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.01197, "memory": 2023, "data_time": 0.09862, "loss_rpn_cls": 0.00275, "loss_rpn_bbox": 0.00249, "loss_cls": 0.0242, "acc": 99.05664, "loss_bbox": 0.03226, "loss": 0.0617, "time": 0.3631}
{"mode": "train", "epoch": 2, "iter": 100, "lr": 0.01397, "memory": 2023, "data_time": 0.05955, "loss_rpn_cls": 0.00204, "loss_rpn_bbox": 0.002, "loss_cls": 0.01979, "acc": 99.24316, "loss_bbox": 0.02582, "loss": 0.04965, "time": 0.31858}
{"mode": "train", "epoch": 2, "iter": 150, "lr": 0.01596, "memory": 2023, "data_time": 0.05955, "loss_rpn_cls": 0.00254, "loss_rpn_bbox": 0.00209, "loss_cls": 0.02195, "acc": 99.12207, "loss_bbox": 0.02679, "loss": 0.05338, "time": 0.32598}
{"mode": "train", "epoch": 2, "iter": 200, "lr": 0.01796, "memory": 2023, "data_time": 0.06095, "loss_rpn_cls": 0.00255, "loss_rpn_bbox": 0.00202, "loss_cls": 0.02026, "acc": 99.21777, "loss_bbox": 0.0305, "loss": 0.05534, "time": 0.32403}
{"mode": "train", "epoch": 2, "iter": 250, "lr": 0.01996, "memory": 2023, "data_time": 0.0597, "loss_rpn_cls": 0.00235, "loss_rpn_bbox": 0.00163, "loss_cls": 0.02206, "acc": 99.14258, "loss_bbox": 0.02912, "loss": 0.05515, "time": 0.3282}
{"mode": "val", "epoch": 2, "iter": 100, "lr": 0.01996, "bbox_mAP": 0.653, "bbox_mAP_50": 0.9634, "bbox_mAP_75": 0.7998, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.6145, "bbox_mAP_l": 0.6586, "bbox_mAP_copypaste": "0.6530 0.9634 0.7998 -1.0000 0.6145 0.6586"}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.02, "memory": 2023, "data_time": 0.09455, "loss_rpn_cls": 0.00204, "loss_rpn_bbox": 0.00155, "loss_cls": 0.02063, "acc": 99.18848, "loss_bbox": 0.02417, "loss": 0.0484, "time": 0.35216}
{"mode": "train", "epoch": 3, "iter": 100, "lr": 0.02, "memory": 2023, "data_time": 0.05831, "loss_rpn_cls": 0.00182, "loss_rpn_bbox": 0.002, "loss_cls": 0.01887, "acc": 99.25, "loss_bbox": 0.02255, "loss": 0.04523, "time": 0.31437}
{"mode": "train", "epoch": 3, "iter": 150, "lr": 0.02, "memory": 2023, "data_time": 0.05915, "loss_rpn_cls": 0.00169, "loss_rpn_bbox": 0.00138, "loss_cls": 0.01644, "acc": 99.32031, "loss_bbox": 0.02065, "loss": 0.04015, "time": 0.31024}
{"mode": "train", "epoch": 3, "iter": 200, "lr": 0.02, "memory": 2023, "data_time": 0.25882, "loss_rpn_cls": 0.0013, "loss_rpn_bbox": 0.00156, "loss_cls": 0.01417, "acc": 99.3877, "loss_bbox": 0.01743, "loss": 0.03446, "time": 0.50627}
{"mode": "train", "epoch": 3, "iter": 250, "lr": 0.02, "memory": 2023, "data_time": 0.06598, "loss_rpn_cls": 0.00139, "loss_rpn_bbox": 0.00162, "loss_cls": 0.01563, "acc": 99.375, "loss_bbox": 0.01836, "loss": 0.037, "time": 0.31295}
{"mode": "val", "epoch": 3, "iter": 100, "lr": 0.02, "bbox_mAP": 0.7467, "bbox_mAP_50": 0.9629, "bbox_mAP_75": 0.9225, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.7668, "bbox_mAP_l": 0.7422, "bbox_mAP_copypaste": "0.7467 0.9629 0.9225 -1.0000 0.7668 0.7422"}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.02, "memory": 2023, "data_time": 0.09615, "loss_rpn_cls": 0.00158, "loss_rpn_bbox": 0.00129, "loss_cls": 0.01559, "acc": 99.36523, "loss_bbox": 0.01657, "loss": 0.03503, "time": 0.34441}
{"mode": "train", "epoch": 4, "iter": 100, "lr": 0.02, "memory": 2023, "data_time": 0.06044, "loss_rpn_cls": 0.00131, "loss_rpn_bbox": 0.00139, "loss_cls": 0.01236, "acc": 99.50684, "loss_bbox": 0.01909, "loss": 0.03414, "time": 0.3104}
{"mode": "train", "epoch": 4, "iter": 150, "lr": 0.02, "memory": 2023, "data_time": 0.05886, "loss_rpn_cls": 0.00103, "loss_rpn_bbox": 0.00106, "loss_cls": 0.01304, "acc": 99.49219, "loss_bbox": 0.01385, "loss": 0.02899, "time": 0.3093}
{"mode": "train", "epoch": 4, "iter": 200, "lr": 0.02, "memory": 2023, "data_time": 0.05909, "loss_rpn_cls": 0.00085, "loss_rpn_bbox": 0.00097, "loss_cls": 0.01283, "acc": 99.45605, "loss_bbox": 0.01276, "loss": 0.0274, "time": 0.30589}
{"mode": "train", "epoch": 4, "iter": 250, "lr": 0.02, "memory": 2023, "data_time": 0.06042, "loss_rpn_cls": 0.00132, "loss_rpn_bbox": 0.00114, "loss_cls": 0.01608, "acc": 99.3623, "loss_bbox": 0.01414, "loss": 0.03268, "time": 0.30895}
{"mode": "val", "epoch": 4, "iter": 100, "lr": 0.02, "bbox_mAP": 0.7379, "bbox_mAP_50": 0.9713, "bbox_mAP_75": 0.8912, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.7689, "bbox_mAP_l": 0.7311, "bbox_mAP_copypaste": "0.7379 0.9713 0.8912 -1.0000 0.7689 0.7311"}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.02, "memory": 2023, "data_time": 0.10236, "loss_rpn_cls": 0.00102, "loss_rpn_bbox": 0.00132, "loss_cls": 0.01442, "acc": 99.38379, "loss_bbox": 0.01523, "loss": 0.032, "time": 0.37527}
{"mode": "train", "epoch": 5, "iter": 100, "lr": 0.02, "memory": 2023, "data_time": 0.05715, "loss_rpn_cls": 0.00107, "loss_rpn_bbox": 0.00119, "loss_cls": 0.01469, "acc": 99.45605, "loss_bbox": 0.01405, "loss": 0.03099, "time": 0.3021}
{"mode": "train", "epoch": 5, "iter": 150, "lr": 0.02, "memory": 2023, "data_time": 0.05731, "loss_rpn_cls": 0.00114, "loss_rpn_bbox": 0.00091, "loss_cls": 0.01294, "acc": 99.44434, "loss_bbox": 0.01276, "loss": 0.02774, "time": 0.30367}
{"mode": "train", "epoch": 5, "iter": 200, "lr": 0.02, "memory": 2023, "data_time": 0.05696, "loss_rpn_cls": 0.00107, "loss_rpn_bbox": 0.00107, "loss_cls": 0.01244, "acc": 99.49902, "loss_bbox": 0.01235, "loss": 0.02692, "time": 0.30066}
{"mode": "train", "epoch": 5, "iter": 250, "lr": 0.02, "memory": 2023, "data_time": 0.0568, "loss_rpn_cls": 0.00072, "loss_rpn_bbox": 0.00099, "loss_cls": 0.01286, "acc": 99.45215, "loss_bbox": 0.01373, "loss": 0.0283, "time": 0.29886}
{"mode": "val", "epoch": 5, "iter": 100, "lr": 0.02, "bbox_mAP": 0.7851, "bbox_mAP_50": 0.976, "bbox_mAP_75": 0.9247, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.7495, "bbox_mAP_l": 0.7896, "bbox_mAP_copypaste": "0.7851 0.9760 0.9247 -1.0000 0.7495 0.7896"}
{"mode": "train", "epoch": 6, "iter": 50, "lr": 0.02, "memory": 2023, "data_time": 0.09557, "loss_rpn_cls": 0.0009, "loss_rpn_bbox": 0.00096, "loss_cls": 0.01274, "acc": 99.45898, "loss_bbox": 0.01094, "loss": 0.02553, "time": 0.3432}
{"mode": "train", "epoch": 6, "iter": 100, "lr": 0.02, "memory": 2023, "data_time": 0.05513, "loss_rpn_cls": 0.00088, "loss_rpn_bbox": 0.00106, "loss_cls": 0.01199, "acc": 99.49609, "loss_bbox": 0.01097, "loss": 0.0249, "time": 0.30203}
{"mode": "train", "epoch": 6, "iter": 150, "lr": 0.02, "memory": 2023, "data_time": 0.0553, "loss_rpn_cls": 0.00108, "loss_rpn_bbox": 0.00117, "loss_cls": 0.01115, "acc": 99.55566, "loss_bbox": 0.01056, "loss": 0.02396, "time": 0.29883}
{"mode": "train", "epoch": 6, "iter": 200, "lr": 0.02, "memory": 2023, "data_time": 0.05614, "loss_rpn_cls": 0.00094, "loss_rpn_bbox": 0.00091, "loss_cls": 0.01114, "acc": 99.55176, "loss_bbox": 0.01017, "loss": 0.02317, "time": 0.29856}
{"mode": "train", "epoch": 6, "iter": 250, "lr": 0.02, "memory": 2023, "data_time": 0.05513, "loss_rpn_cls": 0.00089, "loss_rpn_bbox": 0.00091, "loss_cls": 0.01136, "acc": 99.5293, "loss_bbox": 0.01065, "loss": 0.02381, "time": 0.29931}
{"mode": "val", "epoch": 6, "iter": 100, "lr": 0.02, "bbox_mAP": 0.8183, "bbox_mAP_50": 0.9778, "bbox_mAP_75": 0.9571, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.8078, "bbox_mAP_l": 0.8197, "bbox_mAP_copypaste": "0.8183 0.9778 0.9571 -1.0000 0.8078 0.8197"}
{"mode": "train", "epoch": 7, "iter": 50, "lr": 0.02, "memory": 2023, "data_time": 0.09349, "loss_rpn_cls": 0.00068, "loss_rpn_bbox": 0.00086, "loss_cls": 0.01137, "acc": 99.50977, "loss_bbox": 0.0092, "loss": 0.02212, "time": 0.33864}
{"mode": "train", "epoch": 7, "iter": 100, "lr": 0.02, "memory": 2023, "data_time": 0.05529, "loss_rpn_cls": 0.00068, "loss_rpn_bbox": 0.00079, "loss_cls": 0.01093, "acc": 99.55566, "loss_bbox": 0.011, "loss": 0.0234, "time": 0.29738}
{"mode": "train", "epoch": 7, "iter": 150, "lr": 0.02, "memory": 2023, "data_time": 0.05447, "loss_rpn_cls": 0.0009, "loss_rpn_bbox": 0.00103, "loss_cls": 0.01136, "acc": 99.5498, "loss_bbox": 0.01227, "loss": 0.02556, "time": 0.29848}
{"mode": "train", "epoch": 7, "iter": 200, "lr": 0.02, "memory": 2023, "data_time": 0.05423, "loss_rpn_cls": 0.00085, "loss_rpn_bbox": 0.00088, "loss_cls": 0.01046, "acc": 99.5625, "loss_bbox": 0.01007, "loss": 0.02226, "time": 0.294}
{"mode": "train", "epoch": 7, "iter": 250, "lr": 0.02, "memory": 2023, "data_time": 0.05607, "loss_rpn_cls": 0.00074, "loss_rpn_bbox": 0.00103, "loss_cls": 0.01117, "acc": 99.51465, "loss_bbox": 0.01102, "loss": 0.02396, "time": 0.29249}
{"mode": "val", "epoch": 7, "iter": 100, "lr": 0.02, "bbox_mAP": 0.7964, "bbox_mAP_50": 0.9758, "bbox_mAP_75": 0.9557, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.8207, "bbox_mAP_l": 0.7903, "bbox_mAP_copypaste": "0.7964 0.9758 0.9557 -1.0000 0.8207 0.7903"}
{"mode": "train", "epoch": 8, "iter": 50, "lr": 0.02, "memory": 2023, "data_time": 0.09769, "loss_rpn_cls": 0.00078, "loss_rpn_bbox": 0.00087, "loss_cls": 0.01103, "acc": 99.52344, "loss_bbox": 0.01113, "loss": 0.02381, "time": 0.34531}
{"mode": "train", "epoch": 8, "iter": 100, "lr": 0.02, "memory": 2023, "data_time": 0.05814, "loss_rpn_cls": 0.00088, "loss_rpn_bbox": 0.00093, "loss_cls": 0.01165, "acc": 99.49805, "loss_bbox": 0.01005, "loss": 0.02352, "time": 0.29666}
{"mode": "train", "epoch": 8, "iter": 150, "lr": 0.02, "memory": 2023, "data_time": 0.05806, "loss_rpn_cls": 0.00095, "loss_rpn_bbox": 0.00086, "loss_cls": 0.0103, "acc": 99.58594, "loss_bbox": 0.0114, "loss": 0.02351, "time": 0.29798}
{"mode": "train", "epoch": 8, "iter": 200, "lr": 0.02, "memory": 2023, "data_time": 0.0564, "loss_rpn_cls": 0.00068, "loss_rpn_bbox": 0.00106, "loss_cls": 0.0106, "acc": 99.5625, "loss_bbox": 0.01276, "loss": 0.0251, "time": 0.29885}
{"mode": "train", "epoch": 8, "iter": 250, "lr": 0.02, "memory": 2023, "data_time": 0.07613, "loss_rpn_cls": 0.00092, "loss_rpn_bbox": 0.00076, "loss_cls": 0.01302, "acc": 99.43848, "loss_bbox": 0.01009, "loss": 0.02478, "time": 0.32345}
{"mode": "val", "epoch": 8, "iter": 100, "lr": 0.02, "bbox_mAP": 0.81, "bbox_mAP_50": 0.9745, "bbox_mAP_75": 0.9334, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.8082, "bbox_mAP_l": 0.8093, "bbox_mAP_copypaste": "0.8100 0.9745 0.9334 -1.0000 0.8082 0.8093"}
{"mode": "train", "epoch": 9, "iter": 50, "lr": 0.002, "memory": 2023, "data_time": 0.10187, "loss_rpn_cls": 0.00048, "loss_rpn_bbox": 0.00052, "loss_cls": 0.00981, "acc": 99.58984, "loss_bbox": 0.00799, "loss": 0.01881, "time": 0.35118}
{"mode": "train", "epoch": 9, "iter": 100, "lr": 0.002, "memory": 2023, "data_time": 0.0624, "loss_rpn_cls": 0.00081, "loss_rpn_bbox": 0.00052, "loss_cls": 0.00923, "acc": 99.62988, "loss_bbox": 0.00693, "loss": 0.01749, "time": 0.30781}
{"mode": "train", "epoch": 9, "iter": 150, "lr": 0.002, "memory": 2023, "data_time": 0.06196, "loss_rpn_cls": 0.00051, "loss_rpn_bbox": 0.00044, "loss_cls": 0.00924, "acc": 99.62988, "loss_bbox": 0.0074, "loss": 0.0176, "time": 0.31283}
{"mode": "train", "epoch": 9, "iter": 200, "lr": 0.002, "memory": 2023, "data_time": 0.0615, "loss_rpn_cls": 0.00073, "loss_rpn_bbox": 0.00043, "loss_cls": 0.0079, "acc": 99.70898, "loss_bbox": 0.00659, "loss": 0.01564, "time": 0.30836}
{"mode": "train", "epoch": 9, "iter": 250, "lr": 0.002, "memory": 2023, "data_time": 0.06128, "loss_rpn_cls": 0.00055, "loss_rpn_bbox": 0.00044, "loss_cls": 0.00855, "acc": 99.6709, "loss_bbox": 0.00673, "loss": 0.01627, "time": 0.30993}
{"mode": "val", "epoch": 9, "iter": 100, "lr": 0.002, "bbox_mAP": 0.8466, "bbox_mAP_50": 0.9654, "bbox_mAP_75": 0.9509, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.8363, "bbox_mAP_l": 0.8473, "bbox_mAP_copypaste": "0.8466 0.9654 0.9509 -1.0000 0.8363 0.8473"}
{"mode": "train", "epoch": 10, "iter": 50, "lr": 0.002, "memory": 2023, "data_time": 0.10457, "loss_rpn_cls": 0.00063, "loss_rpn_bbox": 0.00037, "loss_cls": 0.00837, "acc": 99.64062, "loss_bbox": 0.00575, "loss": 0.01513, "time": 0.36591}
{"mode": "train", "epoch": 10, "iter": 100, "lr": 0.002, "memory": 2023, "data_time": 0.06118, "loss_rpn_cls": 0.00056, "loss_rpn_bbox": 0.00047, "loss_cls": 0.00768, "acc": 99.70703, "loss_bbox": 0.00677, "loss": 0.01549, "time": 0.31251}
{"mode": "train", "epoch": 10, "iter": 150, "lr": 0.002, "memory": 2023, "data_time": 0.06165, "loss_rpn_cls": 0.00074, "loss_rpn_bbox": 0.00035, "loss_cls": 0.00807, "acc": 99.66797, "loss_bbox": 0.00558, "loss": 0.01474, "time": 0.30733}
{"mode": "train", "epoch": 10, "iter": 200, "lr": 0.002, "memory": 2023, "data_time": 0.05732, "loss_rpn_cls": 0.00052, "loss_rpn_bbox": 0.00045, "loss_cls": 0.00919, "acc": 99.63477, "loss_bbox": 0.007, "loss": 0.01717, "time": 0.29797}
{"mode": "train", "epoch": 10, "iter": 250, "lr": 0.002, "memory": 2023, "data_time": 0.05749, "loss_rpn_cls": 0.0004, "loss_rpn_bbox": 0.00043, "loss_cls": 0.00754, "acc": 99.72852, "loss_bbox": 0.00656, "loss": 0.01493, "time": 0.29876}
{"mode": "val", "epoch": 10, "iter": 100, "lr": 0.002, "bbox_mAP": 0.8291, "bbox_mAP_50": 0.9387, "bbox_mAP_75": 0.9387, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.7873, "bbox_mAP_l": 0.8399, "bbox_mAP_copypaste": "0.8291 0.9387 0.9387 -1.0000 0.7873 0.8399"}
{"mode": "train", "epoch": 11, "iter": 50, "lr": 0.002, "memory": 2023, "data_time": 0.09671, "loss_rpn_cls": 0.00035, "loss_rpn_bbox": 0.00042, "loss_cls": 0.00826, "acc": 99.65234, "loss_bbox": 0.0064, "loss": 0.01542, "time": 0.33923}
{"mode": "train", "epoch": 11, "iter": 100, "lr": 0.002, "memory": 2023, "data_time": 0.05669, "loss_rpn_cls": 0.00066, "loss_rpn_bbox": 0.00044, "loss_cls": 0.00777, "acc": 99.70703, "loss_bbox": 0.00626, "loss": 0.01514, "time": 0.29709}
{"mode": "train", "epoch": 11, "iter": 150, "lr": 0.002, "memory": 2023, "data_time": 0.05813, "loss_rpn_cls": 0.00048, "loss_rpn_bbox": 0.00039, "loss_cls": 0.00793, "acc": 99.6543, "loss_bbox": 0.00583, "loss": 0.01464, "time": 0.29625}
{"mode": "train", "epoch": 11, "iter": 200, "lr": 0.002, "memory": 2023, "data_time": 0.05718, "loss_rpn_cls": 0.00043, "loss_rpn_bbox": 0.00036, "loss_cls": 0.00796, "acc": 99.6709, "loss_bbox": 0.00595, "loss": 0.01469, "time": 0.29566}
{"mode": "train", "epoch": 11, "iter": 250, "lr": 0.002, "memory": 2023, "data_time": 0.05751, "loss_rpn_cls": 0.00036, "loss_rpn_bbox": 0.00044, "loss_cls": 0.00776, "acc": 99.68848, "loss_bbox": 0.00684, "loss": 0.0154, "time": 0.2994}
{"mode": "val", "epoch": 11, "iter": 100, "lr": 0.002, "bbox_mAP": 0.8273, "bbox_mAP_50": 0.9387, "bbox_mAP_75": 0.9387, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.7962, "bbox_mAP_l": 0.8363, "bbox_mAP_copypaste": "0.8273 0.9387 0.9387 -1.0000 0.7962 0.8363"}
{"mode": "train", "epoch": 12, "iter": 50, "lr": 0.0002, "memory": 2023, "data_time": 0.09466, "loss_rpn_cls": 0.00056, "loss_rpn_bbox": 0.00043, "loss_cls": 0.00797, "acc": 99.66992, "loss_bbox": 0.00564, "loss": 0.01461, "time": 0.33543}
{"mode": "train", "epoch": 12, "iter": 100, "lr": 0.0002, "memory": 2023, "data_time": 0.05531, "loss_rpn_cls": 0.0008, "loss_rpn_bbox": 0.00038, "loss_cls": 0.00717, "acc": 99.70215, "loss_bbox": 0.00554, "loss": 0.01389, "time": 0.29428}
{"mode": "train", "epoch": 12, "iter": 150, "lr": 0.0002, "memory": 2023, "data_time": 0.0551, "loss_rpn_cls": 0.00042, "loss_rpn_bbox": 0.00035, "loss_cls": 0.00663, "acc": 99.75293, "loss_bbox": 0.0055, "loss": 0.0129, "time": 0.2984}
{"mode": "train", "epoch": 12, "iter": 200, "lr": 0.0002, "memory": 2023, "data_time": 0.05611, "loss_rpn_cls": 0.00049, "loss_rpn_bbox": 0.00039, "loss_cls": 0.00753, "acc": 99.69824, "loss_bbox": 0.00549, "loss": 0.0139, "time": 0.29374}
{"mode": "train", "epoch": 12, "iter": 250, "lr": 0.0002, "memory": 2023, "data_time": 0.05627, "loss_rpn_cls": 0.00039, "loss_rpn_bbox": 0.00032, "loss_cls": 0.00672, "acc": 99.74902, "loss_bbox": 0.00559, "loss": 0.01302, "time": 0.29279}
{"mode": "val", "epoch": 12, "iter": 100, "lr": 0.0002, "bbox_mAP": 0.8332, "bbox_mAP_50": 0.9388, "bbox_mAP_75": 0.9388, "bbox_mAP_s": -1.0, "bbox_mAP_m": 0.8104, "bbox_mAP_l": 0.8406, "bbox_mAP_copypaste": "0.8332 0.9388 0.9388 -1.0000 0.8104 0.8406"}
